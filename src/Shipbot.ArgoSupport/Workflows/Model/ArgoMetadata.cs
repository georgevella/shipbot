/* 
 * Argo
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace AutoDeploy.ArgoSupport.Workflows.Model
{
    /// <summary>
    /// Pod metdata
    /// </summary>
    [DataContract]
    public partial class ArgoMetadata :  IEquatable<ArgoMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArgoMetadata" /> class.
        /// </summary>
        /// <param name="annotations">annotations.</param>
        /// <param name="labels">labels.</param>
        public ArgoMetadata(Dictionary<string, string> annotations = default(Dictionary<string, string>), Dictionary<string, string> labels = default(Dictionary<string, string>))
        {
            this.Annotations = annotations;
            this.Labels = labels;
        }
        
        /// <summary>
        /// Gets or Sets Annotations
        /// </summary>
        [DataMember(Name="annotations", EmitDefaultValue=false)]
        public Dictionary<string, string> Annotations { get; set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name="labels", EmitDefaultValue=false)]
        public Dictionary<string, string> Labels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArgoMetadata {\n");
            sb.Append("  Annotations: ").Append(Annotations).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArgoMetadata);
        }

        /// <summary>
        /// Returns true if ArgoMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of ArgoMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArgoMetadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Annotations == input.Annotations ||
                    this.Annotations != null &&
                    this.Annotations.SequenceEqual(input.Annotations)
                ) && 
                (
                    this.Labels == input.Labels ||
                    this.Labels != null &&
                    this.Labels.SequenceEqual(input.Labels)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Annotations != null)
                    hashCode = hashCode * 59 + this.Annotations.GetHashCode();
                if (this.Labels != null)
                    hashCode = hashCode * 59 + this.Labels.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
