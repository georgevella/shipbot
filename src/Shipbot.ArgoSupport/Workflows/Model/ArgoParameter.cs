/* 
 * Argo
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace AutoDeploy.ArgoSupport.Workflows.Model
{
    /// <summary>
    /// Parameter indicate a passed string parameter to a service template with an optional default value
    /// </summary>
    [DataContract]
    public partial class ArgoParameter :  IEquatable<ArgoParameter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArgoParameter" /> class.
        /// </summary>
        [JsonConstructor]
        protected ArgoParameter() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ArgoParameter" /> class.
        /// </summary>
        /// <param name="_default">Default is the default value to use for an input parameter if a value was not supplied.</param>
        /// <param name="globalName">GlobalName exports an output parameter to the global scope, making it available as &#39;{{workflow.outputs.parameters.XXXX}} and in workflow.status.outputs.parameters.</param>
        /// <param name="name">Name is the parameter name (required).</param>
        /// <param name="value">Value is the literal value to use for the parameter. If specified in the context of an input parameter, the value takes precedence over any passed values.</param>
        /// <param name="valueFrom">ValueFrom is the source for the output parameter&#39;s value.</param>
        public ArgoParameter(string _default = default(string), string globalName = default(string), string name = default(string), string value = default(string), ArgoValueFrom valueFrom = default(ArgoValueFrom))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ArgoParameter and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.Default = _default;
            this.GlobalName = globalName;
            this.Value = value;
            this.ValueFrom = valueFrom;
        }
        
        /// <summary>
        /// Default is the default value to use for an input parameter if a value was not supplied
        /// </summary>
        /// <value>Default is the default value to use for an input parameter if a value was not supplied</value>
        [DataMember(Name="default", EmitDefaultValue=false)]
        public string Default { get; set; }

        /// <summary>
        /// GlobalName exports an output parameter to the global scope, making it available as &#39;{{workflow.outputs.parameters.XXXX}} and in workflow.status.outputs.parameters
        /// </summary>
        /// <value>GlobalName exports an output parameter to the global scope, making it available as &#39;{{workflow.outputs.parameters.XXXX}} and in workflow.status.outputs.parameters</value>
        [DataMember(Name="globalName", EmitDefaultValue=false)]
        public string GlobalName { get; set; }

        /// <summary>
        /// Name is the parameter name
        /// </summary>
        /// <value>Name is the parameter name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Value is the literal value to use for the parameter. If specified in the context of an input parameter, the value takes precedence over any passed values
        /// </summary>
        /// <value>Value is the literal value to use for the parameter. If specified in the context of an input parameter, the value takes precedence over any passed values</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// ValueFrom is the source for the output parameter&#39;s value
        /// </summary>
        /// <value>ValueFrom is the source for the output parameter&#39;s value</value>
        [DataMember(Name="valueFrom", EmitDefaultValue=false)]
        public ArgoValueFrom ValueFrom { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArgoParameter {\n");
            sb.Append("  Default: ").Append(Default).Append("\n");
            sb.Append("  GlobalName: ").Append(GlobalName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ValueFrom: ").Append(ValueFrom).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArgoParameter);
        }

        /// <summary>
        /// Returns true if ArgoParameter instances are equal
        /// </summary>
        /// <param name="input">Instance of ArgoParameter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArgoParameter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Default == input.Default ||
                    (this.Default != null &&
                    this.Default.Equals(input.Default))
                ) && 
                (
                    this.GlobalName == input.GlobalName ||
                    (this.GlobalName != null &&
                    this.GlobalName.Equals(input.GlobalName))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.ValueFrom == input.ValueFrom ||
                    (this.ValueFrom != null &&
                    this.ValueFrom.Equals(input.ValueFrom))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Default != null)
                    hashCode = hashCode * 59 + this.Default.GetHashCode();
                if (this.GlobalName != null)
                    hashCode = hashCode * 59 + this.GlobalName.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.ValueFrom != null)
                    hashCode = hashCode * 59 + this.ValueFrom.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
