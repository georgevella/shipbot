/* 
 * Argo
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace AutoDeploy.ArgoSupport.Workflows.Model
{
    /// <summary>
    /// ArtifactoryAuth describes the secret selectors required for authenticating to artifactory
    /// </summary>
    [DataContract]
    public partial class ArgoArtifactoryAuth :  IEquatable<ArgoArtifactoryAuth>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArgoArtifactoryAuth" /> class.
        /// </summary>
        /// <param name="passwordSecret">PasswordSecret is the secret selector to the repository password.</param>
        /// <param name="usernameSecret">UsernameSecret is the secret selector to the repository username.</param>
        public ArgoArtifactoryAuth(k8s.Models.V1SecretKeySelector passwordSecret = default(k8s.Models.V1SecretKeySelector), k8s.Models.V1SecretKeySelector usernameSecret = default(k8s.Models.V1SecretKeySelector))
        {
            this.PasswordSecret = passwordSecret;
            this.UsernameSecret = usernameSecret;
        }
        
        /// <summary>
        /// PasswordSecret is the secret selector to the repository password
        /// </summary>
        /// <value>PasswordSecret is the secret selector to the repository password</value>
        [DataMember(Name="passwordSecret", EmitDefaultValue=false)]
        public k8s.Models.V1SecretKeySelector PasswordSecret { get; set; }

        /// <summary>
        /// UsernameSecret is the secret selector to the repository username
        /// </summary>
        /// <value>UsernameSecret is the secret selector to the repository username</value>
        [DataMember(Name="usernameSecret", EmitDefaultValue=false)]
        public k8s.Models.V1SecretKeySelector UsernameSecret { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArgoArtifactoryAuth {\n");
            sb.Append("  PasswordSecret: ").Append(PasswordSecret).Append("\n");
            sb.Append("  UsernameSecret: ").Append(UsernameSecret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArgoArtifactoryAuth);
        }

        /// <summary>
        /// Returns true if ArgoArtifactoryAuth instances are equal
        /// </summary>
        /// <param name="input">Instance of ArgoArtifactoryAuth to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArgoArtifactoryAuth input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PasswordSecret == input.PasswordSecret ||
                    (this.PasswordSecret != null &&
                    this.PasswordSecret.Equals(input.PasswordSecret))
                ) && 
                (
                    this.UsernameSecret == input.UsernameSecret ||
                    (this.UsernameSecret != null &&
                    this.UsernameSecret.Equals(input.UsernameSecret))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PasswordSecret != null)
                    hashCode = hashCode * 59 + this.PasswordSecret.GetHashCode();
                if (this.UsernameSecret != null)
                    hashCode = hashCode * 59 + this.UsernameSecret.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
