/* 
 * Argo
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace AutoDeploy.ArgoSupport.Workflows.Model
{
    /// <summary>
    /// Artifact indicates an artifact to place at a specified path
    /// </summary>
    [DataContract]
    public partial class ArgoArtifact :  IEquatable<ArgoArtifact>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArgoArtifact" /> class.
        /// </summary>
        [JsonConstructor]
        protected ArgoArtifact() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ArgoArtifact" /> class.
        /// </summary>
        /// <param name="archive">Archive controls how the artifact will be saved to the artifact repository..</param>
        /// <param name="archiveLogs">ArchiveLogs indicates if the container logs should be archived.</param>
        /// <param name="artifactory">Artifactory contains artifactory artifact location details.</param>
        /// <param name="from">From allows an artifact to reference an artifact from a previous step.</param>
        /// <param name="git">Git contains git artifact location details.</param>
        /// <param name="globalName">GlobalName exports an output artifact to the global scope, making it available as &#39;{{workflow.outputs.artifacts.XXXX}} and in workflow.status.outputs.artifacts.</param>
        /// <param name="hdfs">HDFS contains HDFS artifact location details.</param>
        /// <param name="http">HTTP contains HTTP artifact location details.</param>
        /// <param name="mode">mode bits to use on this file, must be a value between 0 and 0777 set when loading input artifacts..</param>
        /// <param name="name">name of the artifact. must be unique within a template&#39;s inputs/outputs. (required).</param>
        /// <param name="optional">Make Artifacts optional, if Artifacts doesn&#39;t generate or exist.</param>
        /// <param name="path">Path is the container path to the artifact.</param>
        /// <param name="raw">Raw contains raw artifact location details.</param>
        /// <param name="s3">S3 contains S3 artifact location details.</param>
        public ArgoArtifact(ArgoArchiveStrategy archive = default(ArgoArchiveStrategy), bool? archiveLogs = default(bool?), ArgoArtifactoryArtifact artifactory = default(ArgoArtifactoryArtifact), string from = default(string), ArgoGitArtifact git = default(ArgoGitArtifact), string globalName = default(string), ArgoHDFSArtifact hdfs = default(ArgoHDFSArtifact), ArgoHTTPArtifact http = default(ArgoHTTPArtifact), int? mode = default(int?), string name = default(string), bool? optional = default(bool?), string path = default(string), ArgoRawArtifact raw = default(ArgoRawArtifact), ArgoS3Artifact s3 = default(ArgoS3Artifact))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ArgoArtifact and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.Archive = archive;
            this.ArchiveLogs = archiveLogs;
            this.Artifactory = artifactory;
            this.From = from;
            this.Git = git;
            this.GlobalName = globalName;
            this.Hdfs = hdfs;
            this.Http = http;
            this.Mode = mode;
            this.Optional = optional;
            this.Path = path;
            this.Raw = raw;
            this.S3 = s3;
        }
        
        /// <summary>
        /// Archive controls how the artifact will be saved to the artifact repository.
        /// </summary>
        /// <value>Archive controls how the artifact will be saved to the artifact repository.</value>
        [DataMember(Name="archive", EmitDefaultValue=false)]
        public ArgoArchiveStrategy Archive { get; set; }

        /// <summary>
        /// ArchiveLogs indicates if the container logs should be archived
        /// </summary>
        /// <value>ArchiveLogs indicates if the container logs should be archived</value>
        [DataMember(Name="archiveLogs", EmitDefaultValue=false)]
        public bool? ArchiveLogs { get; set; }

        /// <summary>
        /// Artifactory contains artifactory artifact location details
        /// </summary>
        /// <value>Artifactory contains artifactory artifact location details</value>
        [DataMember(Name="artifactory", EmitDefaultValue=false)]
        public ArgoArtifactoryArtifact Artifactory { get; set; }

        /// <summary>
        /// From allows an artifact to reference an artifact from a previous step
        /// </summary>
        /// <value>From allows an artifact to reference an artifact from a previous step</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// Git contains git artifact location details
        /// </summary>
        /// <value>Git contains git artifact location details</value>
        [DataMember(Name="git", EmitDefaultValue=false)]
        public ArgoGitArtifact Git { get; set; }

        /// <summary>
        /// GlobalName exports an output artifact to the global scope, making it available as &#39;{{workflow.outputs.artifacts.XXXX}} and in workflow.status.outputs.artifacts
        /// </summary>
        /// <value>GlobalName exports an output artifact to the global scope, making it available as &#39;{{workflow.outputs.artifacts.XXXX}} and in workflow.status.outputs.artifacts</value>
        [DataMember(Name="globalName", EmitDefaultValue=false)]
        public string GlobalName { get; set; }

        /// <summary>
        /// HDFS contains HDFS artifact location details
        /// </summary>
        /// <value>HDFS contains HDFS artifact location details</value>
        [DataMember(Name="hdfs", EmitDefaultValue=false)]
        public ArgoHDFSArtifact Hdfs { get; set; }

        /// <summary>
        /// HTTP contains HTTP artifact location details
        /// </summary>
        /// <value>HTTP contains HTTP artifact location details</value>
        [DataMember(Name="http", EmitDefaultValue=false)]
        public ArgoHTTPArtifact Http { get; set; }

        /// <summary>
        /// mode bits to use on this file, must be a value between 0 and 0777 set when loading input artifacts.
        /// </summary>
        /// <value>mode bits to use on this file, must be a value between 0 and 0777 set when loading input artifacts.</value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public int? Mode { get; set; }

        /// <summary>
        /// name of the artifact. must be unique within a template&#39;s inputs/outputs.
        /// </summary>
        /// <value>name of the artifact. must be unique within a template&#39;s inputs/outputs.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Make Artifacts optional, if Artifacts doesn&#39;t generate or exist
        /// </summary>
        /// <value>Make Artifacts optional, if Artifacts doesn&#39;t generate or exist</value>
        [DataMember(Name="optional", EmitDefaultValue=false)]
        public bool? Optional { get; set; }

        /// <summary>
        /// Path is the container path to the artifact
        /// </summary>
        /// <value>Path is the container path to the artifact</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Raw contains raw artifact location details
        /// </summary>
        /// <value>Raw contains raw artifact location details</value>
        [DataMember(Name="raw", EmitDefaultValue=false)]
        public ArgoRawArtifact Raw { get; set; }

        /// <summary>
        /// S3 contains S3 artifact location details
        /// </summary>
        /// <value>S3 contains S3 artifact location details</value>
        [DataMember(Name="s3", EmitDefaultValue=false)]
        public ArgoS3Artifact S3 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArgoArtifact {\n");
            sb.Append("  Archive: ").Append(Archive).Append("\n");
            sb.Append("  ArchiveLogs: ").Append(ArchiveLogs).Append("\n");
            sb.Append("  Artifactory: ").Append(Artifactory).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Git: ").Append(Git).Append("\n");
            sb.Append("  GlobalName: ").Append(GlobalName).Append("\n");
            sb.Append("  Hdfs: ").Append(Hdfs).Append("\n");
            sb.Append("  Http: ").Append(Http).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Optional: ").Append(Optional).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Raw: ").Append(Raw).Append("\n");
            sb.Append("  S3: ").Append(S3).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArgoArtifact);
        }

        /// <summary>
        /// Returns true if ArgoArtifact instances are equal
        /// </summary>
        /// <param name="input">Instance of ArgoArtifact to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArgoArtifact input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Archive == input.Archive ||
                    (this.Archive != null &&
                    this.Archive.Equals(input.Archive))
                ) && 
                (
                    this.ArchiveLogs == input.ArchiveLogs ||
                    (this.ArchiveLogs != null &&
                    this.ArchiveLogs.Equals(input.ArchiveLogs))
                ) && 
                (
                    this.Artifactory == input.Artifactory ||
                    (this.Artifactory != null &&
                    this.Artifactory.Equals(input.Artifactory))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.Git == input.Git ||
                    (this.Git != null &&
                    this.Git.Equals(input.Git))
                ) && 
                (
                    this.GlobalName == input.GlobalName ||
                    (this.GlobalName != null &&
                    this.GlobalName.Equals(input.GlobalName))
                ) && 
                (
                    this.Hdfs == input.Hdfs ||
                    (this.Hdfs != null &&
                    this.Hdfs.Equals(input.Hdfs))
                ) && 
                (
                    this.Http == input.Http ||
                    (this.Http != null &&
                    this.Http.Equals(input.Http))
                ) && 
                (
                    this.Mode == input.Mode ||
                    (this.Mode != null &&
                    this.Mode.Equals(input.Mode))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Optional == input.Optional ||
                    (this.Optional != null &&
                    this.Optional.Equals(input.Optional))
                ) && 
                (
                    this.Path == input.Path ||
                    (this.Path != null &&
                    this.Path.Equals(input.Path))
                ) && 
                (
                    this.Raw == input.Raw ||
                    (this.Raw != null &&
                    this.Raw.Equals(input.Raw))
                ) && 
                (
                    this.S3 == input.S3 ||
                    (this.S3 != null &&
                    this.S3.Equals(input.S3))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Archive != null)
                    hashCode = hashCode * 59 + this.Archive.GetHashCode();
                if (this.ArchiveLogs != null)
                    hashCode = hashCode * 59 + this.ArchiveLogs.GetHashCode();
                if (this.Artifactory != null)
                    hashCode = hashCode * 59 + this.Artifactory.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.Git != null)
                    hashCode = hashCode * 59 + this.Git.GetHashCode();
                if (this.GlobalName != null)
                    hashCode = hashCode * 59 + this.GlobalName.GetHashCode();
                if (this.Hdfs != null)
                    hashCode = hashCode * 59 + this.Hdfs.GetHashCode();
                if (this.Http != null)
                    hashCode = hashCode * 59 + this.Http.GetHashCode();
                if (this.Mode != null)
                    hashCode = hashCode * 59 + this.Mode.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Optional != null)
                    hashCode = hashCode * 59 + this.Optional.GetHashCode();
                if (this.Path != null)
                    hashCode = hashCode * 59 + this.Path.GetHashCode();
                if (this.Raw != null)
                    hashCode = hashCode * 59 + this.Raw.GetHashCode();
                if (this.S3 != null)
                    hashCode = hashCode * 59 + this.S3.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
