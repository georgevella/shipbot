/* 
 * Argo
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace AutoDeploy.ArgoSupport.Workflows.Model
{
    /// <summary>
    /// HDFSKrbConfig is auth configurations for Kerberos
    /// </summary>
    [DataContract]
    public partial class ArgoHDFSKrbConfig :  IEquatable<ArgoHDFSKrbConfig>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArgoHDFSKrbConfig" /> class.
        /// </summary>
        /// <param name="krbCCacheSecret">KrbCCacheSecret is the secret selector for Kerberos ccache Either ccache or keytab can be set to use Kerberos..</param>
        /// <param name="krbConfigConfigMap">KrbConfig is the configmap selector for Kerberos config as string It must be set if either ccache or keytab is used..</param>
        /// <param name="krbKeytabSecret">KrbKeytabSecret is the secret selector for Kerberos keytab Either ccache or keytab can be set to use Kerberos..</param>
        /// <param name="krbRealm">KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used..</param>
        /// <param name="krbServicePrincipalName">KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used..</param>
        /// <param name="krbUsername">KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used..</param>
        public ArgoHDFSKrbConfig(k8s.Models.V1SecretKeySelector krbCCacheSecret = default(k8s.Models.V1SecretKeySelector), k8s.Models.V1ConfigMapKeySelector krbConfigConfigMap = default(k8s.Models.V1ConfigMapKeySelector), k8s.Models.V1SecretKeySelector krbKeytabSecret = default(k8s.Models.V1SecretKeySelector), string krbRealm = default(string), string krbServicePrincipalName = default(string), string krbUsername = default(string))
        {
            this.KrbCCacheSecret = krbCCacheSecret;
            this.KrbConfigConfigMap = krbConfigConfigMap;
            this.KrbKeytabSecret = krbKeytabSecret;
            this.KrbRealm = krbRealm;
            this.KrbServicePrincipalName = krbServicePrincipalName;
            this.KrbUsername = krbUsername;
        }
        
        /// <summary>
        /// KrbCCacheSecret is the secret selector for Kerberos ccache Either ccache or keytab can be set to use Kerberos.
        /// </summary>
        /// <value>KrbCCacheSecret is the secret selector for Kerberos ccache Either ccache or keytab can be set to use Kerberos.</value>
        [DataMember(Name="krbCCacheSecret", EmitDefaultValue=false)]
        public k8s.Models.V1SecretKeySelector KrbCCacheSecret { get; set; }

        /// <summary>
        /// KrbConfig is the configmap selector for Kerberos config as string It must be set if either ccache or keytab is used.
        /// </summary>
        /// <value>KrbConfig is the configmap selector for Kerberos config as string It must be set if either ccache or keytab is used.</value>
        [DataMember(Name="krbConfigConfigMap", EmitDefaultValue=false)]
        public k8s.Models.V1ConfigMapKeySelector KrbConfigConfigMap { get; set; }

        /// <summary>
        /// KrbKeytabSecret is the secret selector for Kerberos keytab Either ccache or keytab can be set to use Kerberos.
        /// </summary>
        /// <value>KrbKeytabSecret is the secret selector for Kerberos keytab Either ccache or keytab can be set to use Kerberos.</value>
        [DataMember(Name="krbKeytabSecret", EmitDefaultValue=false)]
        public k8s.Models.V1SecretKeySelector KrbKeytabSecret { get; set; }

        /// <summary>
        /// KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.
        /// </summary>
        /// <value>KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.</value>
        [DataMember(Name="krbRealm", EmitDefaultValue=false)]
        public string KrbRealm { get; set; }

        /// <summary>
        /// KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.
        /// </summary>
        /// <value>KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.</value>
        [DataMember(Name="krbServicePrincipalName", EmitDefaultValue=false)]
        public string KrbServicePrincipalName { get; set; }

        /// <summary>
        /// KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.
        /// </summary>
        /// <value>KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.</value>
        [DataMember(Name="krbUsername", EmitDefaultValue=false)]
        public string KrbUsername { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArgoHDFSKrbConfig {\n");
            sb.Append("  KrbCCacheSecret: ").Append(KrbCCacheSecret).Append("\n");
            sb.Append("  KrbConfigConfigMap: ").Append(KrbConfigConfigMap).Append("\n");
            sb.Append("  KrbKeytabSecret: ").Append(KrbKeytabSecret).Append("\n");
            sb.Append("  KrbRealm: ").Append(KrbRealm).Append("\n");
            sb.Append("  KrbServicePrincipalName: ").Append(KrbServicePrincipalName).Append("\n");
            sb.Append("  KrbUsername: ").Append(KrbUsername).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArgoHDFSKrbConfig);
        }

        /// <summary>
        /// Returns true if ArgoHDFSKrbConfig instances are equal
        /// </summary>
        /// <param name="input">Instance of ArgoHDFSKrbConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArgoHDFSKrbConfig input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.KrbCCacheSecret == input.KrbCCacheSecret ||
                    (this.KrbCCacheSecret != null &&
                    this.KrbCCacheSecret.Equals(input.KrbCCacheSecret))
                ) && 
                (
                    this.KrbConfigConfigMap == input.KrbConfigConfigMap ||
                    (this.KrbConfigConfigMap != null &&
                    this.KrbConfigConfigMap.Equals(input.KrbConfigConfigMap))
                ) && 
                (
                    this.KrbKeytabSecret == input.KrbKeytabSecret ||
                    (this.KrbKeytabSecret != null &&
                    this.KrbKeytabSecret.Equals(input.KrbKeytabSecret))
                ) && 
                (
                    this.KrbRealm == input.KrbRealm ||
                    (this.KrbRealm != null &&
                    this.KrbRealm.Equals(input.KrbRealm))
                ) && 
                (
                    this.KrbServicePrincipalName == input.KrbServicePrincipalName ||
                    (this.KrbServicePrincipalName != null &&
                    this.KrbServicePrincipalName.Equals(input.KrbServicePrincipalName))
                ) && 
                (
                    this.KrbUsername == input.KrbUsername ||
                    (this.KrbUsername != null &&
                    this.KrbUsername.Equals(input.KrbUsername))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.KrbCCacheSecret != null)
                    hashCode = hashCode * 59 + this.KrbCCacheSecret.GetHashCode();
                if (this.KrbConfigConfigMap != null)
                    hashCode = hashCode * 59 + this.KrbConfigConfigMap.GetHashCode();
                if (this.KrbKeytabSecret != null)
                    hashCode = hashCode * 59 + this.KrbKeytabSecret.GetHashCode();
                if (this.KrbRealm != null)
                    hashCode = hashCode * 59 + this.KrbRealm.GetHashCode();
                if (this.KrbServicePrincipalName != null)
                    hashCode = hashCode * 59 + this.KrbServicePrincipalName.GetHashCode();
                if (this.KrbUsername != null)
                    hashCode = hashCode * 59 + this.KrbUsername.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
