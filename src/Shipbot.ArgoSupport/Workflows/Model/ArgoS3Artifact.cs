/* 
 * Argo
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace AutoDeploy.ArgoSupport.Workflows.Model
{
    /// <summary>
    /// S3Artifact is the location of an S3 artifact
    /// </summary>
    [DataContract]
    public partial class ArgoS3Artifact :  IEquatable<ArgoS3Artifact>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArgoS3Artifact" /> class.
        /// </summary>
        [JsonConstructor]
        protected ArgoS3Artifact() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ArgoS3Artifact" /> class.
        /// </summary>
        /// <param name="accessKeySecret">AccessKeySecret is the secret selector to the bucket&#39;s access key (required).</param>
        /// <param name="bucket">Bucket is the name of the bucket (required).</param>
        /// <param name="endpoint">Endpoint is the hostname of the bucket endpoint (required).</param>
        /// <param name="insecure">Insecure will connect to the service with TLS.</param>
        /// <param name="key">Key is the key in the bucket where the artifact resides (required).</param>
        /// <param name="region">Region contains the optional bucket region.</param>
        /// <param name="secretKeySecret">SecretKeySecret is the secret selector to the bucket&#39;s secret key (required).</param>
        public ArgoS3Artifact(k8s.Models.V1SecretKeySelector accessKeySecret = default(k8s.Models.V1SecretKeySelector), string bucket = default(string), string endpoint = default(string), bool? insecure = default(bool?), string key = default(string), string region = default(string), k8s.Models.V1SecretKeySelector secretKeySecret = default(k8s.Models.V1SecretKeySelector))
        {
            // to ensure "accessKeySecret" is required (not null)
            if (accessKeySecret == null)
            {
                throw new InvalidDataException("accessKeySecret is a required property for ArgoS3Artifact and cannot be null");
            }
            else
            {
                this.AccessKeySecret = accessKeySecret;
            }
            // to ensure "bucket" is required (not null)
            if (bucket == null)
            {
                throw new InvalidDataException("bucket is a required property for ArgoS3Artifact and cannot be null");
            }
            else
            {
                this.Bucket = bucket;
            }
            // to ensure "endpoint" is required (not null)
            if (endpoint == null)
            {
                throw new InvalidDataException("endpoint is a required property for ArgoS3Artifact and cannot be null");
            }
            else
            {
                this.Endpoint = endpoint;
            }
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new InvalidDataException("key is a required property for ArgoS3Artifact and cannot be null");
            }
            else
            {
                this.Key = key;
            }
            // to ensure "secretKeySecret" is required (not null)
            if (secretKeySecret == null)
            {
                throw new InvalidDataException("secretKeySecret is a required property for ArgoS3Artifact and cannot be null");
            }
            else
            {
                this.SecretKeySecret = secretKeySecret;
            }
            this.Insecure = insecure;
            this.Region = region;
        }
        
        /// <summary>
        /// AccessKeySecret is the secret selector to the bucket&#39;s access key
        /// </summary>
        /// <value>AccessKeySecret is the secret selector to the bucket&#39;s access key</value>
        [DataMember(Name="accessKeySecret", EmitDefaultValue=false)]
        public k8s.Models.V1SecretKeySelector AccessKeySecret { get; set; }

        /// <summary>
        /// Bucket is the name of the bucket
        /// </summary>
        /// <value>Bucket is the name of the bucket</value>
        [DataMember(Name="bucket", EmitDefaultValue=false)]
        public string Bucket { get; set; }

        /// <summary>
        /// Endpoint is the hostname of the bucket endpoint
        /// </summary>
        /// <value>Endpoint is the hostname of the bucket endpoint</value>
        [DataMember(Name="endpoint", EmitDefaultValue=false)]
        public string Endpoint { get; set; }

        /// <summary>
        /// Insecure will connect to the service with TLS
        /// </summary>
        /// <value>Insecure will connect to the service with TLS</value>
        [DataMember(Name="insecure", EmitDefaultValue=false)]
        public bool? Insecure { get; set; }

        /// <summary>
        /// Key is the key in the bucket where the artifact resides
        /// </summary>
        /// <value>Key is the key in the bucket where the artifact resides</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Region contains the optional bucket region
        /// </summary>
        /// <value>Region contains the optional bucket region</value>
        [DataMember(Name="region", EmitDefaultValue=false)]
        public string Region { get; set; }

        /// <summary>
        /// SecretKeySecret is the secret selector to the bucket&#39;s secret key
        /// </summary>
        /// <value>SecretKeySecret is the secret selector to the bucket&#39;s secret key</value>
        [DataMember(Name="secretKeySecret", EmitDefaultValue=false)]
        public k8s.Models.V1SecretKeySelector SecretKeySecret { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArgoS3Artifact {\n");
            sb.Append("  AccessKeySecret: ").Append(AccessKeySecret).Append("\n");
            sb.Append("  Bucket: ").Append(Bucket).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  Insecure: ").Append(Insecure).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  SecretKeySecret: ").Append(SecretKeySecret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArgoS3Artifact);
        }

        /// <summary>
        /// Returns true if ArgoS3Artifact instances are equal
        /// </summary>
        /// <param name="input">Instance of ArgoS3Artifact to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArgoS3Artifact input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccessKeySecret == input.AccessKeySecret ||
                    (this.AccessKeySecret != null &&
                    this.AccessKeySecret.Equals(input.AccessKeySecret))
                ) && 
                (
                    this.Bucket == input.Bucket ||
                    (this.Bucket != null &&
                    this.Bucket.Equals(input.Bucket))
                ) && 
                (
                    this.Endpoint == input.Endpoint ||
                    (this.Endpoint != null &&
                    this.Endpoint.Equals(input.Endpoint))
                ) && 
                (
                    this.Insecure == input.Insecure ||
                    (this.Insecure != null &&
                    this.Insecure.Equals(input.Insecure))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.SecretKeySecret == input.SecretKeySecret ||
                    (this.SecretKeySecret != null &&
                    this.SecretKeySecret.Equals(input.SecretKeySecret))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccessKeySecret != null)
                    hashCode = hashCode * 59 + this.AccessKeySecret.GetHashCode();
                if (this.Bucket != null)
                    hashCode = hashCode * 59 + this.Bucket.GetHashCode();
                if (this.Endpoint != null)
                    hashCode = hashCode * 59 + this.Endpoint.GetHashCode();
                if (this.Insecure != null)
                    hashCode = hashCode * 59 + this.Insecure.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Region != null)
                    hashCode = hashCode * 59 + this.Region.GetHashCode();
                if (this.SecretKeySecret != null)
                    hashCode = hashCode * 59 + this.SecretKeySecret.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
