/* 
 * Argo
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace AutoDeploy.ArgoSupport.Workflows.Model
{
    /// <summary>
    /// ArchiveStrategy describes how to archive files/directory when saving artifacts
    /// </summary>
    [DataContract]
    public partial class ArgoArchiveStrategy :  IEquatable<ArgoArchiveStrategy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArgoArchiveStrategy" /> class.
        /// </summary>
        /// <param name="none">none.</param>
        /// <param name="tar">tar.</param>
        public ArgoArchiveStrategy(ArgoNoneStrategy none = default(ArgoNoneStrategy), ArgoTarStrategy tar = default(ArgoTarStrategy))
        {
            this.None = none;
            this.Tar = tar;
        }
        
        /// <summary>
        /// Gets or Sets None
        /// </summary>
        [DataMember(Name="none", EmitDefaultValue=false)]
        public ArgoNoneStrategy None { get; set; }

        /// <summary>
        /// Gets or Sets Tar
        /// </summary>
        [DataMember(Name="tar", EmitDefaultValue=false)]
        public ArgoTarStrategy Tar { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArgoArchiveStrategy {\n");
            sb.Append("  None: ").Append(None).Append("\n");
            sb.Append("  Tar: ").Append(Tar).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArgoArchiveStrategy);
        }

        /// <summary>
        /// Returns true if ArgoArchiveStrategy instances are equal
        /// </summary>
        /// <param name="input">Instance of ArgoArchiveStrategy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArgoArchiveStrategy input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.None == input.None ||
                    (this.None != null &&
                    this.None.Equals(input.None))
                ) && 
                (
                    this.Tar == input.Tar ||
                    (this.Tar != null &&
                    this.Tar.Equals(input.Tar))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.None != null)
                    hashCode = hashCode * 59 + this.None.GetHashCode();
                if (this.Tar != null)
                    hashCode = hashCode * 59 + this.Tar.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
