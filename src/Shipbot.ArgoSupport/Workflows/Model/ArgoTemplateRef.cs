/* 
 * Argo
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace AutoDeploy.ArgoSupport.Workflows.Model
{
    /// <summary>
    /// TemplateRef is a reference of template resource.
    /// </summary>
    [DataContract]
    public partial class ArgoTemplateRef :  IEquatable<ArgoTemplateRef>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArgoTemplateRef" /> class.
        /// </summary>
        /// <param name="name">Name is the resource name of the template..</param>
        /// <param name="runtimeResolution">RuntimeResolution skips validation at creation time. By enabling this option, you can create the referred workflow template before the actual runtime..</param>
        /// <param name="template">Template is the name of referred template in the resource..</param>
        public ArgoTemplateRef(string name = default(string), bool? runtimeResolution = default(bool?), string template = default(string))
        {
            this.Name = name;
            this.RuntimeResolution = runtimeResolution;
            this.Template = template;
        }
        
        /// <summary>
        /// Name is the resource name of the template.
        /// </summary>
        /// <value>Name is the resource name of the template.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// RuntimeResolution skips validation at creation time. By enabling this option, you can create the referred workflow template before the actual runtime.
        /// </summary>
        /// <value>RuntimeResolution skips validation at creation time. By enabling this option, you can create the referred workflow template before the actual runtime.</value>
        [DataMember(Name="runtimeResolution", EmitDefaultValue=false)]
        public bool? RuntimeResolution { get; set; }

        /// <summary>
        /// Template is the name of referred template in the resource.
        /// </summary>
        /// <value>Template is the name of referred template in the resource.</value>
        [DataMember(Name="template", EmitDefaultValue=false)]
        public string Template { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArgoTemplateRef {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RuntimeResolution: ").Append(RuntimeResolution).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArgoTemplateRef);
        }

        /// <summary>
        /// Returns true if ArgoTemplateRef instances are equal
        /// </summary>
        /// <param name="input">Instance of ArgoTemplateRef to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArgoTemplateRef input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RuntimeResolution == input.RuntimeResolution ||
                    (this.RuntimeResolution != null &&
                    this.RuntimeResolution.Equals(input.RuntimeResolution))
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.RuntimeResolution != null)
                    hashCode = hashCode * 59 + this.RuntimeResolution.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
