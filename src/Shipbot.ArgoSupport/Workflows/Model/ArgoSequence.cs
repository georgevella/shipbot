/* 
 * Argo
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace AutoDeploy.ArgoSupport.Workflows.Model
{
    /// <summary>
    /// Sequence expands a workflow step into numeric range
    /// </summary>
    [DataContract]
    public partial class ArgoSequence :  IEquatable<ArgoSequence>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArgoSequence" /> class.
        /// </summary>
        /// <param name="count">Count is number of elements in the sequence (default: 0). Not to be used with end.</param>
        /// <param name="end">Number at which to end the sequence (default: 0). Not to be used with Count.</param>
        /// <param name="format">Format is a printf format string to format the value in the sequence.</param>
        /// <param name="start">Number at which to start the sequence (default: 0).</param>
        public ArgoSequence(string count = default(string), string end = default(string), string format = default(string), string start = default(string))
        {
            this.Count = count;
            this.End = end;
            this.Format = format;
            this.Start = start;
        }
        
        /// <summary>
        /// Count is number of elements in the sequence (default: 0). Not to be used with end
        /// </summary>
        /// <value>Count is number of elements in the sequence (default: 0). Not to be used with end</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public string Count { get; set; }

        /// <summary>
        /// Number at which to end the sequence (default: 0). Not to be used with Count
        /// </summary>
        /// <value>Number at which to end the sequence (default: 0). Not to be used with Count</value>
        [DataMember(Name="end", EmitDefaultValue=false)]
        public string End { get; set; }

        /// <summary>
        /// Format is a printf format string to format the value in the sequence
        /// </summary>
        /// <value>Format is a printf format string to format the value in the sequence</value>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public string Format { get; set; }

        /// <summary>
        /// Number at which to start the sequence (default: 0)
        /// </summary>
        /// <value>Number at which to start the sequence (default: 0)</value>
        [DataMember(Name="start", EmitDefaultValue=false)]
        public string Start { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArgoSequence {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArgoSequence);
        }

        /// <summary>
        /// Returns true if ArgoSequence instances are equal
        /// </summary>
        /// <param name="input">Instance of ArgoSequence to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArgoSequence input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Count == input.Count ||
                    (this.Count != null &&
                    this.Count.Equals(input.Count))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Count != null)
                    hashCode = hashCode * 59 + this.Count.GetHashCode();
                if (this.End != null)
                    hashCode = hashCode * 59 + this.End.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Start != null)
                    hashCode = hashCode * 59 + this.Start.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
