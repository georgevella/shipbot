/* 
 * Argo
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace AutoDeploy.ArgoSupport.Workflows.Model
{
    /// <summary>
    /// DAGTemplate is a template subtype for directed acyclic graph templates
    /// </summary>
    [DataContract]
    public partial class ArgoDAGTemplate :  IEquatable<ArgoDAGTemplate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ArgoDAGTemplate" /> class.
        /// </summary>
        [JsonConstructor]
        protected ArgoDAGTemplate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ArgoDAGTemplate" /> class.
        /// </summary>
        /// <param name="failFast">This flag is for DAG logic. The DAG logic has a built-in \&quot;fail fast\&quot; feature to stop scheduling new steps, as soon as it detects that one of the DAG nodes is failed. Then it waits until all DAG nodes are completed before failing the DAG itself. The FailFast flag default is true,  if set to false, it will allow a DAG to run all branches of the DAG to completion (either success or failure), regardless of the failed outcomes of branches in the DAG. More info and example about this feature at https://github.com/argoproj/argo/issues/1442.</param>
        /// <param name="target">Target are one or more names of targets to execute in a DAG.</param>
        /// <param name="tasks">Tasks are a list of DAG tasks (required).</param>
        public ArgoDAGTemplate(bool? failFast = default(bool?), string target = default(string), List<ArgoDAGTask> tasks = default(List<ArgoDAGTask>))
        {
            // to ensure "tasks" is required (not null)
            if (tasks == null)
            {
                throw new InvalidDataException("tasks is a required property for ArgoDAGTemplate and cannot be null");
            }
            else
            {
                this.Tasks = tasks;
            }
            this.FailFast = failFast;
            this.Target = target;
        }
        
        /// <summary>
        /// This flag is for DAG logic. The DAG logic has a built-in \&quot;fail fast\&quot; feature to stop scheduling new steps, as soon as it detects that one of the DAG nodes is failed. Then it waits until all DAG nodes are completed before failing the DAG itself. The FailFast flag default is true,  if set to false, it will allow a DAG to run all branches of the DAG to completion (either success or failure), regardless of the failed outcomes of branches in the DAG. More info and example about this feature at https://github.com/argoproj/argo/issues/1442
        /// </summary>
        /// <value>This flag is for DAG logic. The DAG logic has a built-in \&quot;fail fast\&quot; feature to stop scheduling new steps, as soon as it detects that one of the DAG nodes is failed. Then it waits until all DAG nodes are completed before failing the DAG itself. The FailFast flag default is true,  if set to false, it will allow a DAG to run all branches of the DAG to completion (either success or failure), regardless of the failed outcomes of branches in the DAG. More info and example about this feature at https://github.com/argoproj/argo/issues/1442</value>
        [DataMember(Name="failFast", EmitDefaultValue=false)]
        public bool? FailFast { get; set; }

        /// <summary>
        /// Target are one or more names of targets to execute in a DAG
        /// </summary>
        /// <value>Target are one or more names of targets to execute in a DAG</value>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public string Target { get; set; }

        /// <summary>
        /// Tasks are a list of DAG tasks
        /// </summary>
        /// <value>Tasks are a list of DAG tasks</value>
        [DataMember(Name="tasks", EmitDefaultValue=false)]
        public List<ArgoDAGTask> Tasks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArgoDAGTemplate {\n");
            sb.Append("  FailFast: ").Append(FailFast).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Tasks: ").Append(Tasks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ArgoDAGTemplate);
        }

        /// <summary>
        /// Returns true if ArgoDAGTemplate instances are equal
        /// </summary>
        /// <param name="input">Instance of ArgoDAGTemplate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArgoDAGTemplate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FailFast == input.FailFast ||
                    (this.FailFast != null &&
                    this.FailFast.Equals(input.FailFast))
                ) && 
                (
                    this.Target == input.Target ||
                    (this.Target != null &&
                    this.Target.Equals(input.Target))
                ) && 
                (
                    this.Tasks == input.Tasks ||
                    this.Tasks != null &&
                    this.Tasks.SequenceEqual(input.Tasks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FailFast != null)
                    hashCode = hashCode * 59 + this.FailFast.GetHashCode();
                if (this.Target != null)
                    hashCode = hashCode * 59 + this.Target.GetHashCode();
                if (this.Tasks != null)
                    hashCode = hashCode * 59 + this.Tasks.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
